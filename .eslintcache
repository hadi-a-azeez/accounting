[{"C:\\Users\\Suhail\\Desktop\\hadi\\youraccounts\\accounting\\src\\pages\\entry\\payment.js":"1","C:\\Users\\Suhail\\Desktop\\hadi\\youraccounts\\accounting\\src\\pages\\entry\\cashReciept.js":"2","C:\\Users\\Suhail\\Desktop\\hadi\\youraccounts\\accounting\\src\\index.js":"3","C:\\Users\\Suhail\\Desktop\\hadi\\youraccounts\\accounting\\src\\pages\\home.js":"4","C:\\Users\\Suhail\\Desktop\\hadi\\youraccounts\\accounting\\src\\pages\\entry\\entry.js":"5","C:\\Users\\Suhail\\Desktop\\hadi\\youraccounts\\accounting\\src\\components\\topBar.js":"6","C:\\Users\\Suhail\\Desktop\\hadi\\youraccounts\\accounting\\src\\components\\sideBar.js":"7","C:\\Users\\Suhail\\Desktop\\hadi\\youraccounts\\accounting\\src\\api\\customers.js":"8","C:\\Users\\Suhail\\Desktop\\hadi\\youraccounts\\accounting\\src\\api\\payment.js":"9","C:\\Users\\Suhail\\Desktop\\hadi\\youraccounts\\accounting\\src\\pages\\entry\\purchase.js":"10","C:\\Users\\Suhail\\Desktop\\hadi\\youraccounts\\accounting\\src\\pages\\reports.js":"11","C:\\Users\\Suhail\\Desktop\\hadi\\youraccounts\\accounting\\src\\pages\\customers\\customersList.js":"12","C:\\Users\\Suhail\\Desktop\\hadi\\youraccounts\\accounting\\src\\pages\\entry\\sale.js":"13","C:\\Users\\Suhail\\Desktop\\hadi\\youraccounts\\accounting\\src\\pages\\customers\\customerHistory.js":"14","C:\\Users\\Suhail\\Desktop\\hadi\\youraccounts\\accounting\\src\\components\\updateCustomer.js":"15","C:\\Users\\Suhail\\Desktop\\hadi\\youraccounts\\accounting\\src\\config.js":"16","C:\\Users\\Suhail\\Desktop\\hadi\\youraccounts\\accounting\\src\\api\\purchase.js":"17","C:\\Users\\Suhail\\Desktop\\hadi\\youraccounts\\accounting\\src\\api\\exchange.js":"18","C:\\Users\\Suhail\\Desktop\\hadi\\youraccounts\\accounting\\src\\api\\sale.js":"19","C:\\Users\\Suhail\\Desktop\\hadi\\youraccounts\\accounting\\src\\api\\cashReciept.js":"20","C:\\Users\\Suhail\\Desktop\\hadi\\youraccounts\\accounting\\src\\App.js":"21"},{"size":3872,"mtime":1613458786097,"results":"22","hashOfConfig":"23"},{"size":7083,"mtime":1613457240092,"results":"24","hashOfConfig":"23"},{"size":293,"mtime":1611570163982,"results":"25","hashOfConfig":"23"},{"size":331,"mtime":1611661035468,"results":"26","hashOfConfig":"23"},{"size":1834,"mtime":1612088118150,"results":"27","hashOfConfig":"23"},{"size":307,"mtime":1611660908048,"results":"28","hashOfConfig":"23"},{"size":1867,"mtime":1611660544354,"results":"29","hashOfConfig":"23"},{"size":936,"mtime":1613387549748,"results":"30","hashOfConfig":"23"},{"size":580,"mtime":1612724707414,"results":"31","hashOfConfig":"23"},{"size":4989,"mtime":1613458821900,"results":"32","hashOfConfig":"23"},{"size":11031,"mtime":1612763064124,"results":"33","hashOfConfig":"23"},{"size":8322,"mtime":1613394549486,"results":"34","hashOfConfig":"23"},{"size":4751,"mtime":1613458805843,"results":"35","hashOfConfig":"23"},{"size":12855,"mtime":1613389735784,"results":"36","hashOfConfig":"23"},{"size":1742,"mtime":1611654676852,"results":"37","hashOfConfig":"23"},{"size":106,"mtime":1613211559612,"results":"38","hashOfConfig":"23"},{"size":600,"mtime":1612724732711,"results":"39","hashOfConfig":"23"},{"size":590,"mtime":1612724678186,"results":"40","hashOfConfig":"23"},{"size":542,"mtime":1612724760071,"results":"41","hashOfConfig":"23"},{"size":627,"mtime":1612725306156,"results":"42","hashOfConfig":"23"},{"size":758,"mtime":1612121426864,"results":"43","hashOfConfig":"23"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},"18mqnqx",{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"51"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56","usedDeprecatedRules":"51"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"51"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"61"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"51"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69","usedDeprecatedRules":"46"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"72","usedDeprecatedRules":"51"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"75","usedDeprecatedRules":"46"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"78","messages":"79","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"80","usedDeprecatedRules":"46"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"83"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"61"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"51"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"51"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"96"},"C:\\Users\\Suhail\\Desktop\\hadi\\youraccounts\\accounting\\src\\pages\\entry\\payment.js",[],["97","98"],"C:\\Users\\Suhail\\Desktop\\hadi\\youraccounts\\accounting\\src\\pages\\entry\\cashReciept.js",[],"C:\\Users\\Suhail\\Desktop\\hadi\\youraccounts\\accounting\\src\\index.js",[],["99","100"],"C:\\Users\\Suhail\\Desktop\\hadi\\youraccounts\\accounting\\src\\pages\\home.js",[],"C:\\Users\\Suhail\\Desktop\\hadi\\youraccounts\\accounting\\src\\pages\\entry\\entry.js",["101","102","103","104","105"],"import styles from \"./css/entry.module.css\";\r\nimport { useState } from \"react\";\r\nimport SideBar from \"../../components/sideBar\";\r\nimport TopBar from \"../../components/topBar\";\r\n\r\nimport {\r\n  Select,\r\n  Box,\r\n  FormControl,\r\n  FormLabel,\r\n  Input,\r\n  Flex,\r\n  Button,\r\n} from \"@chakra-ui/react\";\r\nimport { CashReciept } from \"./cashReciept\";\r\nimport { Payment } from \"./payment\";\r\nimport { Purchase } from \"./purchase\";\r\nimport { Sale } from \"./sale\";\r\n\r\nconst Entry = () => {\r\n  const [mode, setMode] = useState(\"purchase\");\r\n  const [isModalVisible, setIsModalVisible] = useState(false);\r\n\r\n  return (\r\n    <div className={styles.container}>\r\n      <SideBar />\r\n      <TopBar label=\"Entry\" />\r\n      <Box\r\n        d=\"flex\"\r\n        borderRadius=\"6px\"\r\n        justifyContent=\"center\"\r\n        flexDirection=\"column\"\r\n        alignItems=\"center\"\r\n        w=\"70%\"\r\n        shadow=\"lg\"\r\n        paddingBottom=\"10\"\r\n      >\r\n        <Flex\r\n          dir=\"row\"\r\n          w=\"90%\"\r\n          mt=\"3\"\r\n          d=\"flex\"\r\n          justifyContent=\"flex-start\"\r\n          w=\"70%\"\r\n        >\r\n          <FormControl w=\"25%\">\r\n            <FormLabel>Mode</FormLabel>\r\n            <Select\r\n              variant=\"filled\"\r\n              size=\"lg\"\r\n              onChange={(e) => setMode(e.target.value)}\r\n            >\r\n              <option value=\"purchase\">Purchase</option>\r\n              <option value=\"sale\">Sale</option>\r\n              <option value=\"payment\">Payment</option>\r\n              <option value=\"cash\">Cash Reciept</option>\r\n            </Select>\r\n          </FormControl>\r\n        </Flex>\r\n        {mode === \"purchase\" && <Purchase />}\r\n        {mode === \"sale\" && <Sale />}\r\n        {mode === \"payment\" && <Payment />}\r\n        {mode === \"cash\" && <CashReciept />}\r\n      </Box>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Entry;\r\n","C:\\Users\\Suhail\\Desktop\\hadi\\youraccounts\\accounting\\src\\components\\topBar.js",[],"C:\\Users\\Suhail\\Desktop\\hadi\\youraccounts\\accounting\\src\\components\\sideBar.js",[],["106","107"],"C:\\Users\\Suhail\\Desktop\\hadi\\youraccounts\\accounting\\src\\api\\customers.js",[],"C:\\Users\\Suhail\\Desktop\\hadi\\youraccounts\\accounting\\src\\api\\payment.js",[],["108","109"],"C:\\Users\\Suhail\\Desktop\\hadi\\youraccounts\\accounting\\src\\pages\\entry\\purchase.js",["110"],"import {\r\n  Select,\r\n  Box,\r\n  FormControl,\r\n  FormLabel,\r\n  Input,\r\n  Flex,\r\n  Button,\r\n  useToast,\r\n} from \"@chakra-ui/react\";\r\nimport { useState } from \"react\";\r\nimport {\r\n  getCustomerByIdAPI,\r\n  searchCustomersAPI,\r\n  updateCustomerObAPI,\r\n} from \"../../api/customers\";\r\n\r\nimport DatePicker from \"react-date-picker\";\r\nimport AsyncSelect from \"react-select/async\";\r\nimport { addPurchaseAPI } from \"../../api/purchase\";\r\n\r\nexport const Purchase = () => {\r\n  const [purchaseData, setPurchaseData] = useState({\r\n    currency_quantity: 0,\r\n    currency_charge: 0,\r\n    currency_type: \"SR\",\r\n    customer_id: 0,\r\n\r\n    date: new Date(),\r\n  });\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const toast = useToast();\r\n\r\n  const searchCustomers = async (searchTerm, callBack) => {\r\n    const customerResponse = await searchCustomersAPI(searchTerm);\r\n    const filteredResponse = customerResponse.data.map((customer) => ({\r\n      value: customer.id,\r\n      label: customer.customer_name,\r\n    }));\r\n\r\n    callBack(filteredResponse);\r\n  };\r\n  const handleAddPurchase = async () => {\r\n    setIsLoading(true);\r\n    const newPurchase = {\r\n      ...purchaseData,\r\n      currency_total:\r\n        purchaseData.currency_charge * purchaseData.currency_quantity,\r\n    };\r\n\r\n    //getting details of customer for updating opening balance\r\n    const customerDetails = await getCustomerByIdAPI(purchaseData.customer_id);\r\n    const ob = customerDetails.data.opening_balance;\r\n\r\n    //updating opening balance\r\n    const updateOb = await updateCustomerObAPI(\r\n      parseFloat(\r\n        ob + purchaseData.currency_charge * purchaseData.currency_quantity\r\n      ),\r\n      purchaseData.customer_id\r\n    );\r\n    console.log(updateOb);\r\n\r\n    //adding purchase\r\n    const response = await addPurchaseAPI(newPurchase);\r\n    console.log(response);\r\n    if (response.status === 200) {\r\n      setIsLoading(false);\r\n      toast({\r\n        title: \"Purchase Added.\",\r\n        description: \"Purchase added successfully\",\r\n        status: \"success\",\r\n        duration: 2000,\r\n        isClosable: true,\r\n      });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Flex dir=\"row\" w=\"90%\" mt=\"3\" d=\"flex\" justifyContent=\"center\">\r\n        <FormControl w=\"25%\">\r\n          <FormLabel>Currency</FormLabel>\r\n          <Select\r\n            variant=\"filled\"\r\n            size=\"lg\"\r\n            onChange={(e) =>\r\n              setPurchaseData({\r\n                ...purchaseData,\r\n                currency_type: e.target.value,\r\n              })\r\n            }\r\n          >\r\n            <option value=\"SR\">SR</option>\r\n            <option value=\"AED\">AED</option>\r\n            <option value=\"INR\">INR</option>\r\n          </Select>\r\n        </FormControl>\r\n        <FormControl w=\"25%\" ml=\"3\">\r\n          <FormLabel>Date</FormLabel>\r\n          <DatePicker\r\n            format=\"dd/MM/yyyy\"\r\n            value={purchaseData.date}\r\n            onChange={(date) => {\r\n              setPurchaseData({ ...purchaseData, date });\r\n            }}\r\n          />\r\n        </FormControl>\r\n        <FormControl w=\"25%\" ml=\"3\">\r\n          <FormLabel>Customer</FormLabel>\r\n          <AsyncSelect\r\n            loadOptions={searchCustomers}\r\n            onChange={(input) =>\r\n              setPurchaseData({ ...purchaseData, customer_id: input.value })\r\n            }\r\n          />\r\n        </FormControl>\r\n      </Flex>\r\n\r\n      <Flex dir=\"row\" w=\"90%\" mt=\"3\" d=\"flex\" justifyContent=\"center\">\r\n        <FormControl w=\"25%\">\r\n          <FormLabel>Quantity</FormLabel>\r\n          <Input\r\n            type=\"number\"\r\n            variant=\"filled\"\r\n            w=\"100%\"\r\n            size=\"lg\"\r\n            name=\"quantity\"\r\n            onChange={(e) =>\r\n              setPurchaseData({\r\n                ...purchaseData,\r\n                currency_quantity: parseFloat(e.target.value),\r\n              })\r\n            }\r\n          />\r\n        </FormControl>\r\n        <FormControl w=\"25%\" ml=\"3\">\r\n          <FormLabel>Charge</FormLabel>\r\n          <Input\r\n            type=\"number\"\r\n            variant=\"filled\"\r\n            w=\"100%\"\r\n            size=\"lg\"\r\n            name=\"charge\"\r\n            onChange={(e) =>\r\n              setPurchaseData({\r\n                ...purchaseData,\r\n                currency_charge: parseFloat(e.target.value),\r\n              })\r\n            }\r\n          />\r\n        </FormControl>\r\n        <FormControl w=\"25%\" ml=\"3\">\r\n          <FormLabel>Total</FormLabel>\r\n          <Input\r\n            variant=\"filled\"\r\n            w=\"100%\"\r\n            size=\"lg\"\r\n            name=\"total\"\r\n            value={\r\n              purchaseData.currency_quantity * purchaseData.currency_charge\r\n            }\r\n            readOnly\r\n          />\r\n        </FormControl>\r\n      </Flex>\r\n      <Button\r\n        colorScheme=\"blue\"\r\n        size=\"lg\"\r\n        mt=\"4\"\r\n        onClick={handleAddPurchase}\r\n        isLoading={isLoading}\r\n        loadingText=\"Adding purchase\"\r\n      >\r\n        Add Purchase\r\n      </Button>\r\n    </>\r\n  );\r\n};\r\n","C:\\Users\\Suhail\\Desktop\\hadi\\youraccounts\\accounting\\src\\pages\\reports.js",["111","112","113"],"import { useState, useEffect } from \"react\";\r\nimport SideBar from \"../components/sideBar\";\r\nimport TopBar from \"../components/topBar\";\r\nimport styles from \"./reports.module.css\";\r\nimport { getAllPurchaseHistoryAPI } from \"../api/purchase\";\r\nimport { getAllSaleHistoryAPI } from \"../api/sale\";\r\nimport { getAllCashReceiptHistoryAPI } from \"../api/cashReciept\";\r\nimport { getAllPaymentHistoryAPI } from \"../api/payment\";\r\nimport { getAllExchangeHistoryAPI } from \"../api/exchange\";\r\nimport {\r\n  Button,\r\n  Table,\r\n  Thead,\r\n  Tbody,\r\n  Tfoot,\r\n  Tr,\r\n  Th,\r\n  Td,\r\n  Box,\r\n  Text,\r\n  Stack,\r\n  Flex,\r\n  Spinner,\r\n} from \"@chakra-ui/react\";\r\n\r\nconst Reports = () => {\r\n  const [purchaseHistory, setPurchaseHistory] = useState([]);\r\n  const [saleHistory, setSaleHistory] = useState([]);\r\n  const [cashReceiptHistory, setCashReceiptHistory] = useState([]);\r\n  const [paymentHistory, setPaymentHistory] = useState([]);\r\n  const [exchangeHistory, setExchaneHistory] = useState([]);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [total, setTotal] = useState({\r\n    sale: 0,\r\n    purchase: 0,\r\n    cash_receipt: 0,\r\n    exchange: 0,\r\n    payment: 0,\r\n    exchange: 0,\r\n  });\r\n\r\n  useEffect(() => {\r\n    setIsLoading(true);\r\n    const getData = async () => {\r\n      const purchaseData = await getAllPurchaseHistoryAPI();\r\n      const saleData = await getAllSaleHistoryAPI();\r\n      const cashReceiptData = await getAllCashReceiptHistoryAPI();\r\n      const paymentData = await getAllPaymentHistoryAPI();\r\n      const exchangeData = await getAllExchangeHistoryAPI();\r\n\r\n      setPurchaseHistory(purchaseData.data.purchases);\r\n      setSaleHistory(saleData.data.sales);\r\n      setCashReceiptHistory(cashReceiptData.data.cash_receipts);\r\n      setPaymentHistory(paymentData.data.payments);\r\n      setExchaneHistory(exchangeData.data.exchanges);\r\n\r\n      setTotal({\r\n        purchase: purchaseData.data.sum_of_purchases,\r\n        sale: saleData.data.sum_of_sales,\r\n        cash_receipt: cashReceiptData.data.sum_of_cash_receipts,\r\n        payment: paymentData.data.sum_of_payments,\r\n        exchange: exchangeData.data.sum_of_exchanges,\r\n      });\r\n\r\n      setIsLoading(false);\r\n    };\r\n\r\n    getData();\r\n  }, []);\r\n\r\n  return (\r\n    <div className={styles.container}>\r\n      <SideBar />\r\n      <TopBar label=\"Reports\" />\r\n      <Flex direction=\"row\" w=\"90%\" ml=\"140px\" mt=\"70px\" alignSelf=\"flex-start\">\r\n        {/* debit and credit */}\r\n        <Box\r\n          borderWidth=\"1px\"\r\n          borderRadius=\"lg\"\r\n          overflow=\"hidden\"\r\n          w=\"20%\"\r\n          h=\"auto\"\r\n          p={4}\r\n          bg=\"gray.200\"\r\n        >\r\n          <Text fontWeight=\"700\" fontSize=\"20px\">\r\n            Total stock: {total.purchase - total.sale}\r\n          </Text>\r\n          <Text fontWeight=\"700\" fontSize=\"20px\">\r\n            To Get: {total.sale - total.cash_receipt}\r\n          </Text>\r\n        </Box>\r\n      </Flex>\r\n      {/*purchases starts here */}\r\n      {isLoading && (\r\n        <Flex justifyContent=\"center\" alignItems=\"center\" w=\"100%\" h=\"80vh\">\r\n          <Spinner\r\n            thickness=\"4px\"\r\n            speed=\"0.65s\"\r\n            emptyColor=\"gray.200\"\r\n            color=\"blue.500\"\r\n            size=\"xl\"\r\n            mt=\"10\"\r\n          />\r\n        </Flex>\r\n      )}\r\n      {purchaseHistory.length > 0 && (\r\n        <>\r\n          <Text fontWeight=\"600\" alignSelf=\"flex-start\" ml=\"140px\">\r\n            Purchase\r\n          </Text>\r\n          <Box w=\"80%\" boxShadow=\"lg\" mt=\"3\" borderRadius=\"8px\">\r\n            <Table variant=\"simple\">\r\n              <Thead>\r\n                <Tr>\r\n                  <Th>Mode</Th>\r\n                  <Th>Date</Th>\r\n                  <Th>Quantity</Th>\r\n                  <Th>Charge</Th>\r\n                  <Th>Total</Th>\r\n                </Tr>\r\n              </Thead>\r\n              <Tbody>\r\n                {purchaseHistory.map((purchase) => (\r\n                  <Tr key={purchase.id}>\r\n                    <Td>Purchase</Td>\r\n                    <Td>{purchase.date}</Td>\r\n                    <Td>{purchase.currency_quantity}</Td>\r\n                    <Td>{purchase.currency_charge}</Td>\r\n                    <Td>\r\n                      {purchase.currency_quantity * purchase.currency_charge}\r\n                    </Td>\r\n                  </Tr>\r\n                ))}\r\n              </Tbody>\r\n              <Tfoot>\r\n                <Tr>\r\n                  <Th>Mode</Th>\r\n                  <Th>Date</Th>\r\n                  <Th>Quantity</Th>\r\n                  <Th>Charge</Th>\r\n                  <Th>Total</Th>\r\n                </Tr>\r\n              </Tfoot>\r\n            </Table>\r\n          </Box>\r\n          <Text fontWeight=\"600\" alignSelf=\"flex-start\" ml=\"140px\" mt=\"3\">\r\n            Total Purchase: {total.purchase}\r\n          </Text>\r\n        </>\r\n      )}\r\n      {/* purchase table ends here */}\r\n      {/* payment table starts here */}\r\n      {paymentHistory.length > 0 && (\r\n        <>\r\n          <Text fontWeight=\"600\" alignSelf=\"flex-start\" ml=\"140px\" mt=\"4\">\r\n            Payment\r\n          </Text>\r\n          <Box w=\"80%\" boxShadow=\"lg\" mt=\"3\" borderRadius=\"8px\">\r\n            <Table variant=\"simple\">\r\n              <Thead>\r\n                <Tr>\r\n                  <Th>Mode</Th>\r\n                  <Th>Date</Th>\r\n                  <Th>Currency type</Th>\r\n                  <Th>Amount</Th>\r\n                </Tr>\r\n              </Thead>\r\n              <Tbody>\r\n                {paymentHistory.map((payment) => (\r\n                  <Tr key={payment.id}>\r\n                    <Td>Payment</Td>\r\n                    <Td>{payment.date}</Td>\r\n                    <Td>{payment.currency_type}</Td>\r\n                    <Td>{payment.currency_quantity}</Td>\r\n                  </Tr>\r\n                ))}\r\n              </Tbody>\r\n              <Tfoot>\r\n                <Tr>\r\n                  <Th>Mode</Th>\r\n                  <Th>Date</Th>\r\n                  <Th>Currency type</Th>\r\n                  <Th>Amount</Th>\r\n                </Tr>\r\n              </Tfoot>\r\n            </Table>\r\n          </Box>\r\n          <Text fontWeight=\"600\" alignSelf=\"flex-start\" ml=\"140px\" mt=\"3\">\r\n            Total Payment: {total.payment}\r\n          </Text>\r\n        </>\r\n      )}\r\n      {/* payment table ends here */}\r\n      {/* Sale table starts here */}\r\n      {saleHistory.length > 0 && (\r\n        <>\r\n          <Text fontWeight=\"600\" alignSelf=\"flex-start\" ml=\"140px\" mt=\"4\">\r\n            Sale\r\n          </Text>\r\n          <Box w=\"80%\" boxShadow=\"lg\" mt=\"3\" borderRadius=\"8px\">\r\n            <Table variant=\"simple\">\r\n              <Thead>\r\n                <Tr>\r\n                  <Th>Mode</Th>\r\n                  <Th>Date</Th>\r\n                  <Th>Currency type</Th>\r\n                  <Th>Amount</Th>\r\n                  <Th>Charge</Th>\r\n                  <Th>Total</Th>\r\n                </Tr>\r\n              </Thead>\r\n              <Tbody>\r\n                {saleHistory.map((sale) => (\r\n                  <Tr key={sale.id}>\r\n                    <Td>Sale</Td>\r\n                    <Td>{sale.date}</Td>\r\n                    <Td>{sale.currency_type}</Td>\r\n                    <Td>{sale.currency_quantity}</Td>\r\n                    <Td>{sale.currency_charge}</Td>\r\n                    <Td>{sale.currency_total}</Td>\r\n                  </Tr>\r\n                ))}\r\n              </Tbody>\r\n              <Tfoot>\r\n                <Tr>\r\n                  <Th>Mode</Th>\r\n                  <Th>Date</Th>\r\n                  <Th>Currency type</Th>\r\n                  <Th>Amount</Th>\r\n                  <Th>Charge</Th>\r\n                  <Th>Total</Th>\r\n                </Tr>\r\n              </Tfoot>\r\n            </Table>\r\n          </Box>\r\n          <Text fontWeight=\"600\" alignSelf=\"flex-start\" ml=\"140px\" mt=\"3\">\r\n            Total Sales: {total.sale}\r\n          </Text>\r\n        </>\r\n      )}\r\n      {/* sale table ends here */}\r\n      {/* cash receipt table starts here */}\r\n      {cashReceiptHistory.length > 0 && (\r\n        <>\r\n          <Text fontWeight=\"600\" alignSelf=\"flex-start\" ml=\"140px\" mt=\"4\">\r\n            Cash receipt\r\n          </Text>\r\n          <Box w=\"80%\" boxShadow=\"lg\" mt=\"3\" borderRadius=\"8px\">\r\n            <Table variant=\"simple\">\r\n              <Thead>\r\n                <Tr>\r\n                  <Th>Mode</Th>\r\n                  <Th>Date</Th>\r\n                  <Th>Currency type</Th>\r\n                  <Th>Amount</Th>\r\n                </Tr>\r\n              </Thead>\r\n              <Tbody>\r\n                {cashReceiptHistory.map((cashReceipt) => (\r\n                  <Tr key={cashReceipt.id}>\r\n                    <Td>Cash Reciept</Td>\r\n                    <Td>{cashReceipt.date}</Td>\r\n                    <Td>{cashReceipt.currency_type}</Td>\r\n                    <Td>{cashReceipt.currency_quantity}</Td>\r\n                  </Tr>\r\n                ))}\r\n              </Tbody>\r\n              <Tfoot>\r\n                <Tr>\r\n                  <Th>Mode</Th>\r\n                  <Th>Date</Th>\r\n                  <Th>Currency type</Th>\r\n                  <Th>Amount</Th>\r\n                </Tr>\r\n              </Tfoot>\r\n            </Table>\r\n          </Box>\r\n          <Text fontWeight=\"600\" alignSelf=\"flex-start\" ml=\"140px\" mt=\"3\">\r\n            Total Cash Receipt: {total.cash_receipt}\r\n          </Text>\r\n        </>\r\n      )}\r\n      {/* cash receipt table ends here */}\r\n      {/* exchange table starts here */}\r\n      {exchangeHistory.length > 0 && (\r\n        <>\r\n          <Text fontWeight=\"600\" alignSelf=\"flex-start\" ml=\"140px\" mt=\"4\">\r\n            Exchange\r\n          </Text>\r\n          <Box w=\"80%\" boxShadow=\"lg\" mt=\"3\" borderRadius=\"8px\">\r\n            <Table variant=\"simple\">\r\n              <Thead>\r\n                <Tr>\r\n                  <Th>Mode</Th>\r\n                  <Th>Date</Th>\r\n                  <Th>Currency type</Th>\r\n                  <Th>Amount</Th>\r\n                  <Th>Charge</Th>\r\n                  <Th>Total</Th>\r\n                </Tr>\r\n              </Thead>\r\n              <Tbody>\r\n                {exchangeHistory.map((exchange) => (\r\n                  <Tr key={exchange.id}>\r\n                    <Td>Exchange</Td>\r\n                    <Td>{exchange.date}</Td>\r\n                    <Td>{exchange.currency_type}</Td>\r\n                    <Td>{exchange.currency_quantity}</Td>\r\n                    <Td>{exchange.currency_charge}</Td>\r\n                    <Td>{exchange.currency_total}</Td>\r\n                  </Tr>\r\n                ))}\r\n              </Tbody>\r\n              <Tfoot>\r\n                <Tr>\r\n                  <Th>Mode</Th>\r\n                  <Th>Date</Th>\r\n                  <Th>Currency type</Th>\r\n                  <Th>Amount</Th>\r\n                  <Th>Charge</Th>\r\n                  <Th>Total</Th>\r\n                </Tr>\r\n              </Tfoot>\r\n            </Table>\r\n          </Box>\r\n          <Text fontWeight=\"600\" alignSelf=\"flex-start\" ml=\"140px\" mt=\"3\">\r\n            Total Exchange: {total.exchange}\r\n          </Text>\r\n        </>\r\n      )}\r\n      {/* exchange table ends here */}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Reports;\r\n","C:\\Users\\Suhail\\Desktop\\hadi\\youraccounts\\accounting\\src\\pages\\customers\\customersList.js",["114"],"import { useEffect, useState } from \"react\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport styles from \"./css/customers.module.css\";\r\nimport SideBar from \"../../components/sideBar\";\r\nimport TopBar from \"../../components/topBar\";\r\nimport {\r\n  Button,\r\n  Modal,\r\n  ModalOverlay,\r\n  ModalContent,\r\n  ModalHeader,\r\n  ModalFooter,\r\n  ModalBody,\r\n  ModalCloseButton,\r\n  Input,\r\n  FormControl,\r\n  FormLabel,\r\n  Table,\r\n  Thead,\r\n  Tbody,\r\n  Tfoot,\r\n  Tr,\r\n  Th,\r\n  Td,\r\n  Box,\r\n  IconButton,\r\n  Link,\r\n  Spinner,\r\n} from \"@chakra-ui/react\";\r\nimport { EditIcon } from \"@chakra-ui/icons\";\r\nimport { addCustomerAPI, getCustomerAPI } from \"../../api/customers\";\r\n\r\nconst Customers = () => {\r\n  const [customersData, setCustomersData] = useState([]);\r\n  const [customerDetails, setCustomerDetails] = useState({});\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [isBtnLoading, setIsBtnLoading] = useState(false);\r\n  const [isOpen, setIsOpen] = useState(false);\r\n  const [isUpdateOpen, setIsUpdateOpen] = useState(false);\r\n  const history = useHistory();\r\n\r\n  useEffect(() => {\r\n    const getCustomers = async () => {\r\n      setIsLoading(true);\r\n      const response = await getCustomerAPI();\r\n      console.log(response.data);\r\n      setCustomersData(response.data);\r\n      setIsLoading(false);\r\n    };\r\n    getCustomers();\r\n  }, []);\r\n\r\n  const addCustomer = async () => {\r\n    setIsBtnLoading(true);\r\n    const response = await addCustomerAPI(customerDetails);\r\n    console.log(response);\r\n    if (response.status === 200) {\r\n      setIsBtnLoading(false);\r\n    }\r\n  };\r\n\r\n  const CustomerCard = ({ customer }) => {\r\n    return (\r\n      <Tr>\r\n        <Td>\r\n          <Link\r\n            onClick={() => history.push(`/customer_history/${customer.id}`)}\r\n          >\r\n            {customer.customer_name}\r\n          </Link>\r\n        </Td>\r\n        <Td>{customer.customer_phone}</Td>\r\n        <Td>{customer.customer_charge}</Td>\r\n        <Td>\r\n          <IconButton\r\n            borderRadius=\"30px\"\r\n            icon={<EditIcon />}\r\n            onClick={() => setIsUpdateOpen(true)}\r\n          />\r\n        </Td>\r\n      </Tr>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <div className={styles.container}>\r\n      <SideBar />\r\n      <TopBar label=\"Customers\" />\r\n      <Button\r\n        size=\"lg\"\r\n        colorScheme=\"blue\"\r\n        onClick={() => setIsOpen(true)}\r\n        mt=\"70px\"\r\n        alignSelf=\"flex-start\"\r\n        ml=\"140px\"\r\n      >\r\n        Add New Customer\r\n      </Button>\r\n      {/* Add new customer modal starts here */}\r\n      <Modal isOpen={isOpen} onClose={() => setIsOpen(false)}>\r\n        <ModalOverlay />\r\n        <ModalContent>\r\n          <ModalHeader>Add New Customer</ModalHeader>\r\n          <ModalCloseButton />\r\n          <form>\r\n            <ModalBody>\r\n              <FormControl>\r\n                <FormLabel>Customer Name</FormLabel>\r\n                <Input\r\n                  size=\"lg\"\r\n                  variant=\"filled\"\r\n                  w=\"100%\"\r\n                  placeholder=\"customer name\"\r\n                  onChange={(e) =>\r\n                    setCustomerDetails({\r\n                      ...customerDetails,\r\n                      customer_name: e.target.value,\r\n                    })\r\n                  }\r\n                />\r\n              </FormControl>\r\n              <FormControl>\r\n                <FormLabel>Phone Number</FormLabel>\r\n                <Input\r\n                  type=\"number\"\r\n                  name=\"customer_phone\"\r\n                  onChange={(e) =>\r\n                    setCustomerDetails({\r\n                      ...customerDetails,\r\n                      customer_phone: parseInt(e.target.value),\r\n                    })\r\n                  }\r\n                  size=\"lg\"\r\n                  variant=\"filled\"\r\n                  w=\"100%\"\r\n                  placeholder=\"phone no\"\r\n                />\r\n              </FormControl>\r\n              <FormControl>\r\n                <FormLabel>Charge</FormLabel>\r\n                <Input\r\n                  type=\"number\"\r\n                  name=\"customer_charge\"\r\n                  onChange={(e) =>\r\n                    setCustomerDetails({\r\n                      ...customerDetails,\r\n                      customer_charge: parseFloat(e.target.value),\r\n                    })\r\n                  }\r\n                  size=\"lg\"\r\n                  variant=\"filled\"\r\n                  w=\"100%\"\r\n                  placeholder=\"charge\"\r\n                />\r\n              </FormControl>\r\n              <FormControl>\r\n                <FormLabel>Opening balance</FormLabel>\r\n                <Input\r\n                  type=\"number\"\r\n                  name=\"opening_balance\"\r\n                  onChange={(e) =>\r\n                    setCustomerDetails({\r\n                      ...customerDetails,\r\n                      opening_balance: parseFloat(e.target.value),\r\n                    })\r\n                  }\r\n                  size=\"lg\"\r\n                  variant=\"filled\"\r\n                  w=\"100%\"\r\n                  placeholder=\"charge\"\r\n                />\r\n              </FormControl>\r\n            </ModalBody>\r\n            <ModalFooter>\r\n              <Button\r\n                colorScheme=\"blue\"\r\n                isLoading={isBtnLoading}\r\n                loadingText=\"Adding customer\"\r\n                onClick={addCustomer}\r\n              >\r\n                Add Customer\r\n              </Button>\r\n            </ModalFooter>\r\n          </form>\r\n        </ModalContent>\r\n      </Modal>\r\n      {/* Add new customer modal ends here */}\r\n\r\n      {/* Update customer modal starts here */}\r\n      <Modal isOpen={isUpdateOpen} onClose={() => setIsUpdateOpen(false)}>\r\n        <ModalOverlay />\r\n        <ModalContent>\r\n          <ModalHeader>Update Customer</ModalHeader>\r\n          <ModalCloseButton />\r\n          <ModalBody>\r\n            <FormControl>\r\n              <FormLabel>Customer Name</FormLabel>\r\n              <Input\r\n                name=\"customer_name\"\r\n                size=\"lg\"\r\n                variant=\"filled\"\r\n                w=\"100%\"\r\n                placeholder=\"customer name\"\r\n              />\r\n            </FormControl>\r\n            <FormControl>\r\n              <FormLabel>Phone Number</FormLabel>\r\n              <Input\r\n                name=\"customer_phone\"\r\n                size=\"lg\"\r\n                variant=\"filled\"\r\n                w=\"100%\"\r\n                placeholder=\"phone no\"\r\n              />\r\n            </FormControl>\r\n            <FormControl>\r\n              <FormLabel>Charge</FormLabel>\r\n              <Input\r\n                name=\"customer_charge\"\r\n                size=\"lg\"\r\n                variant=\"filled\"\r\n                w=\"100%\"\r\n                placeholder=\"charge\"\r\n              />\r\n            </FormControl>\r\n          </ModalBody>\r\n\r\n          <ModalFooter>\r\n            <Button variant=\"ghost\" colorScheme=\"red\" mr=\"2\">\r\n              Delete Customer\r\n            </Button>\r\n            <Button colorScheme=\"blue\">Update Customer</Button>\r\n          </ModalFooter>\r\n        </ModalContent>\r\n      </Modal>\r\n      {/* Update customer modal ends here */}\r\n      {isLoading && (\r\n        <Spinner\r\n          thickness=\"4px\"\r\n          speed=\"0.65s\"\r\n          emptyColor=\"gray.200\"\r\n          color=\"blue.500\"\r\n          size=\"xl\"\r\n          mt=\"10\"\r\n        />\r\n      )}\r\n      {/* customer details table starts here */}\r\n      {!isLoading && (\r\n        <Box w=\"80%\" boxShadow=\"lg\" mt=\"3\" borderRadius=\"8px\">\r\n          <Table variant=\"simple\">\r\n            <Thead>\r\n              <Tr>\r\n                <Th>Name</Th>\r\n                <Th>Phone Number</Th>\r\n                <Th>Charge</Th>\r\n                <Th></Th>\r\n              </Tr>\r\n            </Thead>\r\n            <Tbody>\r\n              {customersData &&\r\n                customersData.map((customer, i) => (\r\n                  <CustomerCard customer={customer} key={i} />\r\n                ))}\r\n            </Tbody>\r\n            <Tfoot>\r\n              <Tr>\r\n                <Th>Name</Th>\r\n                <Th>Phone Number</Th>\r\n                <Th>Charge</Th>\r\n                <Th></Th>\r\n              </Tr>\r\n            </Tfoot>\r\n          </Table>\r\n        </Box>\r\n      )}\r\n      {/* customer details table ends here */}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Customers;\r\n","C:\\Users\\Suhail\\Desktop\\hadi\\youraccounts\\accounting\\src\\pages\\entry\\sale.js",[],"C:\\Users\\Suhail\\Desktop\\hadi\\youraccounts\\accounting\\src\\pages\\customers\\customerHistory.js",["115","116","117"],"import { useState, useEffect } from \"react\";\r\nimport TopBar from \"../../components/topBar\";\r\nimport {\r\n  Button,\r\n  Table,\r\n  Thead,\r\n  Tbody,\r\n  Tfoot,\r\n  Tr,\r\n  Th,\r\n  Td,\r\n  Box,\r\n  Text,\r\n  Stack,\r\n  Flex,\r\n  Spinner,\r\n} from \"@chakra-ui/react\";\r\nimport styles from \"./css/customerHistory.module.css\";\r\nimport SideBar from \"../../components/sideBar\";\r\nimport UpdateCustomer from \"../../components/updateCustomer\";\r\nimport { getCustomerByIdAPI } from \"../../api/customers\";\r\nimport { getPurchaseHistoryAPI } from \"../../api/purchase\";\r\nimport { getSaleHistoryAPI } from \"../../api/sale\";\r\nimport { getCashReceiptHistoryAPI } from \"../../api/cashReciept\";\r\nimport { getPaymentHistoryAPI } from \"../../api/payment\";\r\nimport { getExchangeHistoryAPI } from \"../../api/exchange\";\r\n\r\nconst CustomerHistory = (props) => {\r\n  const [isModalVisible, setIsModalVisible] = useState(false);\r\n  const [customerDetails, setCustomerDetails] = useState({});\r\n  const [purchaseHistory, setPurchaseHistory] = useState([]);\r\n  const [saleHistory, setSaleHistory] = useState([]);\r\n  const [cashReceiptHistory, setCashReceiptHistory] = useState([]);\r\n  const [paymentHistory, setPaymentHistory] = useState([]);\r\n  const [exchangeHistory, setExchaneHistory] = useState([]);\r\n  const [total, setTotal] = useState({\r\n    sale: 0,\r\n    purchase: 0,\r\n    cash_receipt: 0,\r\n    exchange: 0,\r\n    payment: 0,\r\n    exchange: 0,\r\n  });\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const id = props.match.params.id;\r\n\r\n  useEffect(() => {\r\n    setIsLoading(true);\r\n    const getData = async () => {\r\n      const userData = await getCustomerByIdAPI(id);\r\n      const purchaseData = await getPurchaseHistoryAPI(id);\r\n      const saleData = await getSaleHistoryAPI(id);\r\n      const cashReceiptData = await getCashReceiptHistoryAPI(id);\r\n      const paymentData = await getPaymentHistoryAPI(id);\r\n      const exchangeData = await getExchangeHistoryAPI(id);\r\n\r\n      setCustomerDetails(userData.data);\r\n      setPurchaseHistory(purchaseData.data.purchases);\r\n      setSaleHistory(saleData.data.sales);\r\n      setCashReceiptHistory(cashReceiptData.data.cash_receipts);\r\n      setPaymentHistory(paymentData.data.payments);\r\n      setExchaneHistory(exchangeData.data.exchanges);\r\n\r\n      setTotal({\r\n        purchase: purchaseData.data.sum_of_purchases,\r\n        sale: saleData.data.sum_of_sales,\r\n        cash_receipt: cashReceiptData.data.sum_of_cash_receipts,\r\n        payment: paymentData.data.sum_of_payments,\r\n        exchange: exchangeData.data.sum_of_exchanges,\r\n      });\r\n\r\n      setIsLoading(false);\r\n    };\r\n\r\n    getData();\r\n  }, []);\r\n\r\n  return (\r\n    <div className={styles.container}>\r\n      <SideBar />\r\n      <TopBar label=\"Customer History\" />\r\n      <Flex direction=\"row\" w=\"90%\" ml=\"140px\" mt=\"70px\" alignSelf=\"flex-start\">\r\n        {/* customer details card starts here */}\r\n        <Box\r\n          borderWidth=\"1px\"\r\n          borderRadius=\"lg\"\r\n          overflow=\"hidden\"\r\n          w=\"30%\"\r\n          h=\"auto\"\r\n          p={4}\r\n          bg=\"gray.200\"\r\n        >\r\n          {customerDetails && (\r\n            <>\r\n              <Text fontWeight=\"600\">\r\n                Customer Name: {customerDetails.customer_name}\r\n              </Text>\r\n              <Text fontWeight=\"600\">\r\n                Phone Number: {customerDetails.customer_phone}\r\n              </Text>\r\n              <Text fontWeight=\"600\">\r\n                Charge: {customerDetails.customer_charge}\r\n              </Text>\r\n            </>\r\n          )}\r\n          <Stack direction=\"row\" mt=\"2\">\r\n            <Button\r\n              colorScheme=\"blue\"\r\n              size=\"sm\"\r\n              onClick={() => console.log(total)}\r\n            >\r\n              Update Customer\r\n            </Button>\r\n            {isModalVisible && <UpdateCustomer />}\r\n            <Button colorScheme=\"red\" size=\"sm\">\r\n              Delete Customer\r\n            </Button>\r\n          </Stack>\r\n        </Box>\r\n        {/* custmer details card ends here */}\r\n\r\n        {/* debit and credit */}\r\n        <Box\r\n          borderWidth=\"1px\"\r\n          borderRadius=\"lg\"\r\n          overflow=\"hidden\"\r\n          w=\"20%\"\r\n          h=\"auto\"\r\n          p={4}\r\n          bg=\"gray.200\"\r\n          ml=\"3\"\r\n        >\r\n          <Text fontWeight=\"700\" fontSize=\"17px\">\r\n            Purchase: {total.purchase}\r\n          </Text>\r\n          <Text fontWeight=\"700\" fontSize=\"17px\">\r\n            Sale: {total.sale}\r\n          </Text>\r\n          <Text fontWeight=\"700\" fontSize=\"17px\">\r\n            Payment: {total.payment}\r\n          </Text>\r\n          <Text fontWeight=\"700\" fontSize=\"17px\">\r\n            Exchange: {total.exchange}\r\n          </Text>\r\n          <Text fontWeight=\"700\" fontSize=\"17px\">\r\n            Balance: {customerDetails.opening_balance}\r\n          </Text>\r\n        </Box>\r\n      </Flex>\r\n      {/*purchases starts here */}\r\n      {isLoading && (\r\n        <Spinner\r\n          thickness=\"4px\"\r\n          speed=\"0.65s\"\r\n          emptyColor=\"gray.200\"\r\n          color=\"blue.500\"\r\n          size=\"xl\"\r\n          mt=\"10\"\r\n        />\r\n      )}\r\n      {purchaseHistory.length > 0 && (\r\n        <>\r\n          <Text fontWeight=\"600\" alignSelf=\"flex-start\" ml=\"140px\" mt=\"4\">\r\n            Purchase\r\n          </Text>\r\n          <Box w=\"80%\" boxShadow=\"lg\" mt=\"3\" borderRadius=\"8px\">\r\n            <Table variant=\"simple\">\r\n              <Thead>\r\n                <Tr>\r\n                  <Th>Mode</Th>\r\n                  <Th>Date</Th>\r\n                  <Th>Quantity</Th>\r\n                  <Th>Charge</Th>\r\n                  <Th>Total</Th>\r\n                </Tr>\r\n              </Thead>\r\n              <Tbody>\r\n                {purchaseHistory.map((purchase) => (\r\n                  <Tr key={purchase.id}>\r\n                    <Td>Purchase</Td>\r\n                    <Td>{purchase.date}</Td>\r\n                    <Td>{purchase.currency_quantity}</Td>\r\n                    <Td>{purchase.currency_charge}</Td>\r\n                    <Td>\r\n                      {purchase.currency_quantity * purchase.currency_charge}\r\n                    </Td>\r\n                  </Tr>\r\n                ))}\r\n              </Tbody>\r\n              <Tfoot>\r\n                <Tr>\r\n                  <Th>Mode</Th>\r\n                  <Th>Date</Th>\r\n                  <Th>Quantity</Th>\r\n                  <Th>Charge</Th>\r\n                  <Th>Total</Th>\r\n                </Tr>\r\n              </Tfoot>\r\n            </Table>\r\n          </Box>\r\n          <Text fontWeight=\"600\" alignSelf=\"flex-start\" ml=\"140px\" mt=\"3\">\r\n            Total Purchase: {total.purchase}\r\n          </Text>\r\n        </>\r\n      )}\r\n      {/* purchase table ends here */}\r\n      {/* payment table starts here */}\r\n      {paymentHistory.length > 0 && (\r\n        <>\r\n          <Text fontWeight=\"600\" alignSelf=\"flex-start\" ml=\"140px\" mt=\"4\">\r\n            Payment\r\n          </Text>\r\n          <Box w=\"80%\" boxShadow=\"lg\" mt=\"3\" borderRadius=\"8px\">\r\n            <Table variant=\"simple\">\r\n              <Thead>\r\n                <Tr>\r\n                  <Th>Mode</Th>\r\n                  <Th>Date</Th>\r\n                  <Th>Currency type</Th>\r\n                  <Th>Amount</Th>\r\n                </Tr>\r\n              </Thead>\r\n              <Tbody>\r\n                {paymentHistory.map((payment) => (\r\n                  <Tr key={payment.id}>\r\n                    <Td>Payment</Td>\r\n                    <Td>{payment.date}</Td>\r\n                    <Td>{payment.currency_type}</Td>\r\n                    <Td>{payment.currency_quantity}</Td>\r\n                  </Tr>\r\n                ))}\r\n              </Tbody>\r\n              <Tfoot>\r\n                <Tr>\r\n                  <Th>Mode</Th>\r\n                  <Th>Date</Th>\r\n                  <Th>Currency type</Th>\r\n                  <Th>Amount</Th>\r\n                </Tr>\r\n              </Tfoot>\r\n            </Table>\r\n          </Box>\r\n          <Text fontWeight=\"600\" alignSelf=\"flex-start\" ml=\"140px\" mt=\"3\">\r\n            Total Payment: {total.payment}\r\n          </Text>\r\n        </>\r\n      )}\r\n      {/* payment table ends here */}\r\n      {/* Sale table starts here */}\r\n      {saleHistory.length > 0 && (\r\n        <>\r\n          <Text fontWeight=\"600\" alignSelf=\"flex-start\" ml=\"140px\" mt=\"4\">\r\n            Sale\r\n          </Text>\r\n          <Box w=\"80%\" boxShadow=\"lg\" mt=\"3\" borderRadius=\"8px\">\r\n            <Table variant=\"simple\">\r\n              <Thead>\r\n                <Tr>\r\n                  <Th>Mode</Th>\r\n                  <Th>Date</Th>\r\n                  <Th>Currency type</Th>\r\n                  <Th>Amount</Th>\r\n                  <Th>Charge</Th>\r\n                  <Th>Total</Th>\r\n                </Tr>\r\n              </Thead>\r\n              <Tbody>\r\n                {saleHistory.map((sale) => (\r\n                  <Tr key={sale.id}>\r\n                    <Td>Sale</Td>\r\n                    <Td>{sale.date}</Td>\r\n                    <Td>{sale.currency_type}</Td>\r\n                    <Td>{sale.currency_quantity}</Td>\r\n                    <Td>{sale.currency_charge}</Td>\r\n                    <Td>{sale.currency_total}</Td>\r\n                  </Tr>\r\n                ))}\r\n              </Tbody>\r\n              <Tfoot>\r\n                <Tr>\r\n                  <Th>Mode</Th>\r\n                  <Th>Date</Th>\r\n                  <Th>Currency type</Th>\r\n                  <Th>Amount</Th>\r\n                  <Th>Charge</Th>\r\n                  <Th>Total</Th>\r\n                </Tr>\r\n              </Tfoot>\r\n            </Table>\r\n          </Box>\r\n          <Text fontWeight=\"600\" alignSelf=\"flex-start\" ml=\"140px\" mt=\"3\">\r\n            Total Sales: {total.sale}\r\n          </Text>\r\n        </>\r\n      )}\r\n      {/* sale table ends here */}\r\n      {/* cash receipt table starts here */}\r\n      {cashReceiptHistory.length > 0 && (\r\n        <>\r\n          <Text fontWeight=\"600\" alignSelf=\"flex-start\" ml=\"140px\" mt=\"4\">\r\n            Cash receipt\r\n          </Text>\r\n          <Box w=\"80%\" boxShadow=\"lg\" mt=\"3\" borderRadius=\"8px\">\r\n            <Table variant=\"simple\">\r\n              <Thead>\r\n                <Tr>\r\n                  <Th>Mode</Th>\r\n                  <Th>Date</Th>\r\n                  <Th>Currency type</Th>\r\n                  <Th>Amount</Th>\r\n                </Tr>\r\n              </Thead>\r\n              <Tbody>\r\n                {cashReceiptHistory.map((cashReceipt) => (\r\n                  <Tr key={cashReceipt.id}>\r\n                    <Td>Cash Reciept</Td>\r\n                    <Td>{cashReceipt.date}</Td>\r\n                    <Td>{cashReceipt.currency_type}</Td>\r\n                    <Td>{cashReceipt.currency_quantity}</Td>\r\n                  </Tr>\r\n                ))}\r\n              </Tbody>\r\n              <Tfoot>\r\n                <Tr>\r\n                  <Th>Mode</Th>\r\n                  <Th>Date</Th>\r\n                  <Th>Currency type</Th>\r\n                  <Th>Amount</Th>\r\n                </Tr>\r\n              </Tfoot>\r\n            </Table>\r\n          </Box>\r\n          <Text fontWeight=\"600\" alignSelf=\"flex-start\" ml=\"140px\" mt=\"3\">\r\n            Total Cash Receipt: {total.cash_receipt}\r\n          </Text>\r\n        </>\r\n      )}\r\n      {/* cash receipt table ends here */}\r\n      {/* exchange table starts here */}\r\n      {exchangeHistory.length > 0 && (\r\n        <>\r\n          <Text fontWeight=\"600\" alignSelf=\"flex-start\" ml=\"140px\" mt=\"4\">\r\n            Exchange\r\n          </Text>\r\n          <Box w=\"80%\" boxShadow=\"lg\" mt=\"3\" borderRadius=\"8px\">\r\n            <Table variant=\"simple\">\r\n              <Thead>\r\n                <Tr>\r\n                  <Th>Mode</Th>\r\n                  <Th>Date</Th>\r\n                  <Th>Currency type</Th>\r\n                  <Th>Amount</Th>\r\n                  <Th>Charge</Th>\r\n                  <Th>Total</Th>\r\n                </Tr>\r\n              </Thead>\r\n              <Tbody>\r\n                {exchangeHistory.map((exchange) => (\r\n                  <Tr key={exchange.id}>\r\n                    <Td>Exchange</Td>\r\n                    <Td>{exchange.date}</Td>\r\n                    <Td>{exchange.currency_type}</Td>\r\n                    <Td>{exchange.currency_quantity}</Td>\r\n                    <Td>{exchange.currency_charge}</Td>\r\n                    <Td>{exchange.currency_total}</Td>\r\n                  </Tr>\r\n                ))}\r\n              </Tbody>\r\n              <Tfoot>\r\n                <Tr>\r\n                  <Th>Mode</Th>\r\n                  <Th>Date</Th>\r\n                  <Th>Currency type</Th>\r\n                  <Th>Amount</Th>\r\n                  <Th>Charge</Th>\r\n                  <Th>Total</Th>\r\n                </Tr>\r\n              </Tfoot>\r\n            </Table>\r\n          </Box>\r\n          <Text fontWeight=\"600\" alignSelf=\"flex-start\" ml=\"140px\" mt=\"3\">\r\n            Total Exchange: {total.exchange}\r\n          </Text>\r\n        </>\r\n      )}\r\n      {/* exchange table ends here */}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CustomerHistory;\r\n","C:\\Users\\Suhail\\Desktop\\hadi\\youraccounts\\accounting\\src\\components\\updateCustomer.js",[],["118","119"],"C:\\Users\\Suhail\\Desktop\\hadi\\youraccounts\\accounting\\src\\config.js",[],"C:\\Users\\Suhail\\Desktop\\hadi\\youraccounts\\accounting\\src\\api\\purchase.js",[],"C:\\Users\\Suhail\\Desktop\\hadi\\youraccounts\\accounting\\src\\api\\exchange.js",[],"C:\\Users\\Suhail\\Desktop\\hadi\\youraccounts\\accounting\\src\\api\\sale.js",[],"C:\\Users\\Suhail\\Desktop\\hadi\\youraccounts\\accounting\\src\\api\\cashReciept.js",[],"C:\\Users\\Suhail\\Desktop\\hadi\\youraccounts\\accounting\\src\\App.js",[],["120","121"],{"ruleId":"122","replacedBy":"123"},{"ruleId":"124","replacedBy":"125"},{"ruleId":"122","replacedBy":"126"},{"ruleId":"124","replacedBy":"127"},{"ruleId":"128","severity":1,"message":"129","line":11,"column":3,"nodeType":"130","messageId":"131","endLine":11,"endColumn":8},{"ruleId":"128","severity":1,"message":"132","line":13,"column":3,"nodeType":"130","messageId":"131","endLine":13,"endColumn":9},{"ruleId":"128","severity":1,"message":"133","line":22,"column":10,"nodeType":"130","messageId":"131","endLine":22,"endColumn":24},{"ruleId":"128","severity":1,"message":"134","line":22,"column":26,"nodeType":"130","messageId":"131","endLine":22,"endColumn":43},{"ruleId":"135","severity":1,"message":"136","line":44,"column":11,"nodeType":"137","endLine":44,"endColumn":18},{"ruleId":"122","replacedBy":"138"},{"ruleId":"124","replacedBy":"139"},{"ruleId":"122","replacedBy":"140"},{"ruleId":"124","replacedBy":"141"},{"ruleId":"128","severity":1,"message":"142","line":3,"column":3,"nodeType":"130","messageId":"131","endLine":3,"endColumn":6},{"ruleId":"128","severity":1,"message":"132","line":11,"column":3,"nodeType":"130","messageId":"131","endLine":11,"endColumn":9},{"ruleId":"128","severity":1,"message":"143","line":21,"column":3,"nodeType":"130","messageId":"131","endLine":21,"endColumn":8},{"ruleId":"144","severity":1,"message":"145","line":39,"column":5,"nodeType":"146","messageId":"147","endLine":39,"endColumn":13},{"ruleId":"128","severity":1,"message":"148","line":2,"column":10,"nodeType":"130","messageId":"131","endLine":2,"endColumn":17},{"ruleId":"128","severity":1,"message":"134","line":29,"column":26,"nodeType":"130","messageId":"131","endLine":29,"endColumn":43},{"ruleId":"144","severity":1,"message":"145","line":42,"column":5,"nodeType":"146","messageId":"147","endLine":42,"endColumn":13},{"ruleId":"149","severity":1,"message":"150","line":76,"column":6,"nodeType":"151","endLine":76,"endColumn":8,"suggestions":"152"},{"ruleId":"122","replacedBy":"153"},{"ruleId":"124","replacedBy":"154"},{"ruleId":"122","replacedBy":"155"},{"ruleId":"124","replacedBy":"156"},"no-native-reassign",["157"],"no-negated-in-lhs",["158"],["157"],["158"],"no-unused-vars","'Input' is defined but never used.","Identifier","unusedVar","'Button' is defined but never used.","'isModalVisible' is assigned a value but never used.","'setIsModalVisible' is assigned a value but never used.","react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute",["157"],["158"],["157"],["158"],"'Box' is defined but never used.","'Stack' is defined but never used.","no-dupe-keys","Duplicate key 'exchange'.","ObjectExpression","unexpected","'useForm' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'id'. Either include it or remove the dependency array.","ArrayExpression",["159"],["157"],["158"],["157"],["158"],"no-global-assign","no-unsafe-negation",{"desc":"160","fix":"161"},"Update the dependencies array to be: [id]",{"range":"162","text":"163"},[2620,2622],"[id]"]