[{"D:\\accounting\\src\\pages\\home.js":"1","D:\\accounting\\src\\pages\\entry\\entry.js":"2","D:\\accounting\\src\\pages\\reports.js":"3","D:\\accounting\\src\\pages\\entry\\purchase.js":"4","D:\\accounting\\src\\api\\sale.js":"5","D:\\accounting\\src\\api\\payment.js":"6","D:\\accounting\\src\\api\\exchange.js":"7","D:\\accounting\\src\\api\\report.js":"8","D:\\accounting\\src\\config.js":"9","D:\\accounting\\src\\pages\\customers\\customersList.js":"10","D:\\accounting\\src\\api\\customers.js":"11","D:\\accounting\\src\\pages\\customers\\customerHistory.js":"12","D:\\accounting\\src\\pages\\entry\\payment.js":"13","D:\\accounting\\src\\api\\purchase.js":"14","D:\\accounting\\src\\components\\updateCustomer.js":"15","D:\\accounting\\src\\components\\sideBar.js":"16","D:\\accounting\\src\\index.js":"17","D:\\accounting\\src\\pages\\entry\\sale.js":"18","D:\\accounting\\src\\App.js":"19","D:\\accounting\\src\\api\\cashReciept.js":"20","D:\\accounting\\src\\pages\\entry\\cashReciept.js":"21","D:\\accounting\\src\\components\\topBar.js":"22"},{"size":331,"mtime":1616829373452,"results":"23","hashOfConfig":"24"},{"size":2108,"mtime":1619428489508,"results":"25","hashOfConfig":"24"},{"size":10898,"mtime":1619421479770,"results":"26","hashOfConfig":"24"},{"size":6571,"mtime":1619430282080,"results":"27","hashOfConfig":"24"},{"size":744,"mtime":1616829373428,"results":"28","hashOfConfig":"24"},{"size":580,"mtime":1616829373427,"results":"29","hashOfConfig":"24"},{"size":590,"mtime":1616829373426,"results":"30","hashOfConfig":"24"},{"size":412,"mtime":1619171599309,"results":"31","hashOfConfig":"24"},{"size":108,"mtime":1619430494667,"results":"32","hashOfConfig":"24"},{"size":8106,"mtime":1619430425590,"results":"33","hashOfConfig":"24"},{"size":1100,"mtime":1619171897121,"results":"34","hashOfConfig":"24"},{"size":14033,"mtime":1619601552182,"results":"35","hashOfConfig":"24"},{"size":5701,"mtime":1619430321349,"results":"36","hashOfConfig":"24"},{"size":600,"mtime":1616829373427,"results":"37","hashOfConfig":"24"},{"size":1742,"mtime":1616829373443,"results":"38","hashOfConfig":"24"},{"size":1867,"mtime":1616829373430,"results":"39","hashOfConfig":"24"},{"size":306,"mtime":1616829373445,"results":"40","hashOfConfig":"24"},{"size":6259,"mtime":1619430055043,"results":"41","hashOfConfig":"24"},{"size":758,"mtime":1616829373424,"results":"42","hashOfConfig":"24"},{"size":627,"mtime":1616829373426,"results":"43","hashOfConfig":"24"},{"size":8938,"mtime":1619430328770,"results":"44","hashOfConfig":"24"},{"size":303,"mtime":1616829373442,"results":"45","hashOfConfig":"24"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"16ecd5z",{"filePath":"48","messages":"49","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50","usedDeprecatedRules":"51"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"54","messages":"55","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"51"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"65"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"68","messages":"69","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70","usedDeprecatedRules":"51"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"75","messages":"76","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"85","messages":"86","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"87","usedDeprecatedRules":"51"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"51"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"92","messages":"93","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"D:\\accounting\\src\\pages\\home.js",[],"D:\\accounting\\src\\pages\\entry\\entry.js",["96","97","98","99","100"],"import styles from \"./css/entry.module.css\";\r\nimport { useState } from \"react\";\r\nimport SideBar from \"../../components/sideBar\";\r\nimport TopBar from \"../../components/topBar\";\r\n\r\nimport {\r\n  Select,\r\n  Box,\r\n  FormControl,\r\n  FormLabel,\r\n  Input,\r\n  Flex,\r\n  Button,\r\n  Heading,\r\n} from \"@chakra-ui/react\";\r\nimport { CashReciept } from \"./cashReciept\";\r\nimport { Payment } from \"./payment\";\r\nimport { Purchase } from \"./purchase\";\r\nimport { Sale } from \"./sale\";\r\n\r\nconst Entry = () => {\r\n  const [mode, setMode] = useState(\"purchase\");\r\n  const [isModalVisible, setIsModalVisible] = useState(false);\r\n\r\n  return (\r\n    <div className={styles.container}>\r\n      <SideBar />\r\n      <TopBar label=\"Entry\" />\r\n      <Box\r\n        mt=\"70px\"\r\n        mb=\"50px\"\r\n        d=\"flex\"\r\n        borderRadius=\"6px\"\r\n        justifyContent=\"center\"\r\n        flexDirection=\"column\"\r\n        alignItems=\"center\"\r\n        w=\"70%\"\r\n        bg=\"white\"\r\n        paddingBottom=\"10\"\r\n        minH=\"500px\"\r\n        borderWidth=\"1px\"\r\n      >\r\n        <Heading\r\n          textTransform=\"capitalize\"\r\n          alignSelf=\"start\"\r\n          ml=\"20px\"\r\n          mt=\"10px\"\r\n        >\r\n          {mode}\r\n        </Heading>\r\n        <Flex\r\n          dir=\"row\"\r\n          w=\"90%\"\r\n          mt=\"3\"\r\n          d=\"flex\"\r\n          justifyContent=\"flex-start\"\r\n          w=\"70%\"\r\n        >\r\n          <FormControl w=\"25%\">\r\n            <FormLabel>Mode</FormLabel>\r\n            <Select\r\n              variant=\"filled\"\r\n              size=\"lg\"\r\n              onChange={(e) => setMode(e.target.value)}\r\n            >\r\n              <option value=\"purchase\">Purchase</option>\r\n              <option value=\"sale\">Sale</option>\r\n              <option value=\"payment\">Payment</option>\r\n              <option value=\"cash\">Cash Reciept</option>\r\n            </Select>\r\n          </FormControl>\r\n        </Flex>\r\n        {mode === \"purchase\" && <Purchase />}\r\n        {mode === \"sale\" && <Sale />}\r\n        {mode === \"payment\" && <Payment />}\r\n        {mode === \"cash\" && <CashReciept />}\r\n      </Box>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Entry;\r\n",["101","102"],"D:\\accounting\\src\\pages\\reports.js",["103","104"],"D:\\accounting\\src\\pages\\entry\\purchase.js",["105","106","107","108"],"D:\\accounting\\src\\api\\sale.js",[],"D:\\accounting\\src\\api\\payment.js",[],["109","110"],"D:\\accounting\\src\\api\\exchange.js",[],"D:\\accounting\\src\\api\\report.js",[],["111","112"],"D:\\accounting\\src\\config.js",[],"D:\\accounting\\src\\pages\\customers\\customersList.js",["113"],"import { useEffect, useState } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport styles from \"./css/customers.module.css\";\r\nimport SideBar from \"../../components/sideBar\";\r\nimport TopBar from \"../../components/topBar\";\r\nimport {\r\n  Button,\r\n  Modal,\r\n  ModalOverlay,\r\n  ModalContent,\r\n  ModalHeader,\r\n  ModalFooter,\r\n  ModalBody,\r\n  ModalCloseButton,\r\n  Input,\r\n  FormControl,\r\n  FormLabel,\r\n  Table,\r\n  Thead,\r\n  Tbody,\r\n  Tfoot,\r\n  Tr,\r\n  Th,\r\n  Td,\r\n  Box,\r\n  IconButton,\r\n  Link,\r\n  Spinner,\r\n} from \"@chakra-ui/react\";\r\nimport { EditIcon } from \"@chakra-ui/icons\";\r\nimport { addCustomerAPI, getCustomerAPI } from \"../../api/customers\";\r\n\r\nconst Customers = () => {\r\n  const [customersData, setCustomersData] = useState([]);\r\n  const [customerDetails, setCustomerDetails] = useState({});\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [isBtnLoading, setIsBtnLoading] = useState(false);\r\n  const [isOpen, setIsOpen] = useState(false);\r\n  const [isUpdateOpen, setIsUpdateOpen] = useState(false);\r\n  const history = useHistory();\r\n\r\n  useEffect(() => {\r\n    const getCustomers = async () => {\r\n      setIsLoading(true);\r\n      const response = await getCustomerAPI();\r\n      console.log(response);\r\n      setCustomersData(response.data);\r\n      setIsLoading(false);\r\n    };\r\n    getCustomers();\r\n  }, []);\r\n\r\n  const addCustomer = async () => {\r\n    setIsBtnLoading(true);\r\n    const response = await addCustomerAPI(customerDetails);\r\n    console.log(response);\r\n    if (response.status === 200) {\r\n      setIsBtnLoading(false);\r\n      setIsOpen(false);\r\n      history.go(0);\r\n    }\r\n  };\r\n\r\n  const CustomerCard = ({ customer }) => {\r\n    return (\r\n      <Tr>\r\n        <Td>\r\n          <Link\r\n            onClick={() => history.push(`/customer_history/${customer.id}`)}\r\n          >\r\n            {customer.customer_name}\r\n          </Link>\r\n        </Td>\r\n        <Td>{customer.customer_phone}</Td>\r\n        <Td>{customer.customer_charge}</Td>\r\n        <Td>\r\n          <IconButton\r\n            borderRadius=\"30px\"\r\n            icon={<EditIcon />}\r\n            onClick={() => setIsUpdateOpen(true)}\r\n          />\r\n        </Td>\r\n      </Tr>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <div className={styles.container}>\r\n      <SideBar />\r\n      <TopBar label=\"Customers\" />\r\n      <Button\r\n        size=\"lg\"\r\n        colorScheme=\"blue\"\r\n        onClick={() => setIsOpen(true)}\r\n        mt=\"70px\"\r\n        alignSelf=\"flex-start\"\r\n        ml=\"140px\"\r\n      >\r\n        Add New Customer\r\n      </Button>\r\n      {/* Add new customer modal starts here */}\r\n      <Modal isOpen={isOpen} onClose={() => setIsOpen(false)}>\r\n        <ModalOverlay />\r\n        <ModalContent>\r\n          <ModalHeader>Add New Customer</ModalHeader>\r\n          <ModalCloseButton />\r\n          <form>\r\n            <ModalBody>\r\n              <FormControl>\r\n                <FormLabel>Customer Name</FormLabel>\r\n                <Input\r\n                  size=\"lg\"\r\n                  variant=\"filled\"\r\n                  w=\"100%\"\r\n                  placeholder=\"customer name\"\r\n                  onChange={(e) =>\r\n                    setCustomerDetails({\r\n                      ...customerDetails,\r\n                      customer_name: e.target.value,\r\n                    })\r\n                  }\r\n                />\r\n              </FormControl>\r\n              <FormControl>\r\n                <FormLabel>Phone Number</FormLabel>\r\n                <Input\r\n                  type=\"number\"\r\n                  name=\"customer_phone\"\r\n                  onChange={(e) =>\r\n                    setCustomerDetails({\r\n                      ...customerDetails,\r\n                      customer_phone: parseInt(e.target.value),\r\n                    })\r\n                  }\r\n                  size=\"lg\"\r\n                  variant=\"filled\"\r\n                  w=\"100%\"\r\n                  placeholder=\"phone no\"\r\n                />\r\n              </FormControl>\r\n              <FormControl>\r\n                <FormLabel>Rate</FormLabel>\r\n                <Input\r\n                  type=\"number\"\r\n                  name=\"customer_charge\"\r\n                  onChange={(e) =>\r\n                    setCustomerDetails({\r\n                      ...customerDetails,\r\n                      customer_charge: parseFloat(e.target.value),\r\n                    })\r\n                  }\r\n                  size=\"lg\"\r\n                  variant=\"filled\"\r\n                  w=\"100%\"\r\n                  placeholder=\"charge\"\r\n                />\r\n              </FormControl>\r\n              <FormControl>\r\n                <FormLabel>Opening balance</FormLabel>\r\n                <Input\r\n                  type=\"number\"\r\n                  name=\"opening_balance\"\r\n                  onChange={(e) =>\r\n                    setCustomerDetails({\r\n                      ...customerDetails,\r\n                      opening_balance: parseFloat(e.target.value),\r\n                    })\r\n                  }\r\n                  size=\"lg\"\r\n                  variant=\"filled\"\r\n                  w=\"100%\"\r\n                  placeholder=\"charge\"\r\n                />\r\n              </FormControl>\r\n            </ModalBody>\r\n            <ModalFooter>\r\n              <Button\r\n                colorScheme=\"blue\"\r\n                isLoading={isBtnLoading}\r\n                loadingText=\"Adding customer\"\r\n                onClick={addCustomer}\r\n              >\r\n                Add Customer\r\n              </Button>\r\n            </ModalFooter>\r\n          </form>\r\n        </ModalContent>\r\n      </Modal>\r\n      {/* Add new customer modal ends here */}\r\n\r\n      {/* Update customer modal starts here */}\r\n      <Modal isOpen={isUpdateOpen} onClose={() => setIsUpdateOpen(false)}>\r\n        <ModalOverlay />\r\n        <ModalContent>\r\n          <ModalHeader>Update Customer</ModalHeader>\r\n          <ModalCloseButton />\r\n          <ModalBody>\r\n            <FormControl>\r\n              <FormLabel>Customer Name</FormLabel>\r\n              <Input\r\n                name=\"customer_name\"\r\n                size=\"lg\"\r\n                variant=\"filled\"\r\n                w=\"100%\"\r\n                placeholder=\"customer name\"\r\n              />\r\n            </FormControl>\r\n            <FormControl>\r\n              <FormLabel>Phone Number</FormLabel>\r\n              <Input\r\n                name=\"customer_phone\"\r\n                size=\"lg\"\r\n                variant=\"filled\"\r\n                w=\"100%\"\r\n                placeholder=\"phone no\"\r\n              />\r\n            </FormControl>\r\n            <FormControl>\r\n              <FormLabel>Charge</FormLabel>\r\n              <Input\r\n                name=\"customer_charge\"\r\n                size=\"lg\"\r\n                variant=\"filled\"\r\n                w=\"100%\"\r\n                placeholder=\"charge\"\r\n              />\r\n            </FormControl>\r\n          </ModalBody>\r\n\r\n          <ModalFooter>\r\n            <Button variant=\"ghost\" colorScheme=\"red\" mr=\"2\">\r\n              Delete Customer\r\n            </Button>\r\n            <Button colorScheme=\"blue\">Update Customer</Button>\r\n          </ModalFooter>\r\n        </ModalContent>\r\n      </Modal>\r\n      {/* Update customer modal ends here */}\r\n      {isLoading && (\r\n        <Spinner\r\n          thickness=\"4px\"\r\n          speed=\"0.65s\"\r\n          emptyColor=\"gray.200\"\r\n          color=\"blue.500\"\r\n          size=\"xl\"\r\n          mt=\"10\"\r\n        />\r\n      )}\r\n      {/* customer details table starts here */}\r\n      {!isLoading && (\r\n        <Box w=\"80%\" mt=\"3\" borderRadius=\"3px\" background=\"white\">\r\n          <Table variant=\"simple\">\r\n            <Thead>\r\n              <Tr>\r\n                <Th>Name</Th>\r\n                <Th>Phone Number</Th>\r\n                <Th>Rate</Th>\r\n                <Th></Th>\r\n              </Tr>\r\n            </Thead>\r\n            <Tbody>\r\n              {customersData &&\r\n                customersData.map((customer, i) => (\r\n                  <CustomerCard customer={customer} key={i} />\r\n                ))}\r\n            </Tbody>\r\n          </Table>\r\n        </Box>\r\n      )}\r\n      {/* customer details table ends here */}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Customers;\r\n","D:\\accounting\\src\\api\\customers.js",[],"D:\\accounting\\src\\pages\\customers\\customerHistory.js",["114","115"],"D:\\accounting\\src\\pages\\entry\\payment.js",["116","117"],"D:\\accounting\\src\\api\\purchase.js",[],"D:\\accounting\\src\\components\\updateCustomer.js",[],"D:\\accounting\\src\\components\\sideBar.js",[],"D:\\accounting\\src\\index.js",[],"D:\\accounting\\src\\pages\\entry\\sale.js",["118","119"],"import {\r\n  Select,\r\n  FormControl,\r\n  FormLabel,\r\n  Input,\r\n  SimpleGrid,\r\n  Button,\r\n  useToast,\r\n  Alert,\r\n  AlertIcon,\r\n} from \"@chakra-ui/react\";\r\nimport { useState } from \"react\";\r\nimport {\r\n  getCustomerByIdAPI,\r\n  searchCustomersAPI,\r\n  updateCustomerObAPI,\r\n} from \"../../api/customers\";\r\n\r\nimport DatePicker from \"react-date-picker\";\r\nimport AsyncSelect from \"react-select/async\";\r\nimport { addSaleAPI } from \"../../api/sale\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nexport const Sale = () => {\r\n  const [isValidationError, setIsValidationError] = useState(false);\r\n\r\n  const [saleData, setSaleData] = useState({\r\n    currency_quantity: 0,\r\n    currency_charge: 0,\r\n    convertion_rate: 0,\r\n    currency_type: \"AED\",\r\n    customer_id: 0,\r\n    date: new Date(),\r\n  });\r\n\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const toast = useToast();\r\n  const history = useHistory();\r\n\r\n  const validate = (callBack) => {\r\n    setIsValidationError(false);\r\n    if (\r\n      saleData.currency_quantity > 0 &&\r\n      saleData.currency_charge > 0 &&\r\n      saleData.convertion_rate > 0 &&\r\n      saleData.customer_id > 0\r\n    )\r\n      return callBack();\r\n    setIsValidationError(true);\r\n  };\r\n\r\n  const searchCustomers = async (searchTerm, callBack) => {\r\n    const customerResponse = await searchCustomersAPI(searchTerm);\r\n    const filteredResponse = customerResponse.data.map((customer) => ({\r\n      value: customer.id,\r\n      label: customer.customer_name,\r\n    }));\r\n\r\n    callBack(filteredResponse);\r\n  };\r\n  const handleAddSale = async () => {\r\n    setIsLoading(true);\r\n\r\n    let newSale = {\r\n      ...saleData,\r\n      convertion_rate: saleData.convertion_rate,\r\n      currency_total: saleData.currency_quantity * saleData.currency_charge,\r\n      currency_total_aed:\r\n        (saleData.currency_charge * saleData.currency_quantity) /\r\n        saleData.convertion_rate,\r\n    };\r\n    console.log(newSale);\r\n    //adding sale\r\n    const response = await addSaleAPI(newSale);\r\n    //getting details of customer for updating opening balance\r\n    const customerDetails = await getCustomerByIdAPI(saleData.customer_id);\r\n    const ob = parseFloat(customerDetails.data.opening_balance);\r\n\r\n    if (response.status === 200) {\r\n      setIsLoading(false);\r\n      toast({\r\n        title: \"Sale Added\",\r\n        description: \"Sale added successfully\",\r\n        status: \"success\",\r\n        duration: 2000,\r\n        isClosable: true,\r\n      });\r\n      history.go(0);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {isValidationError && (\r\n        <Alert status=\"error\" mt=\"10px\" mb=\"10px\">\r\n          <AlertIcon />\r\n          Please Fill All Fields!\r\n        </Alert>\r\n      )}\r\n      <SimpleGrid columns={3} spacing={3} w=\"70%\" justifyContent=\"center\">\r\n        <FormControl w=\"100%\">\r\n          <FormLabel>Currency</FormLabel>\r\n          <Select\r\n            variant=\"filled\"\r\n            size=\"lg\"\r\n            onChange={(e) =>\r\n              setSaleData({\r\n                ...saleData,\r\n                currency_type: e.target.value,\r\n              })\r\n            }\r\n          >\r\n            <option value=\"AED\">AED</option>\r\n            <option value=\"SR\">SR</option>\r\n            <option value=\"INR\">INR</option>\r\n          </Select>\r\n        </FormControl>\r\n        <FormControl w=\"100%\" ml=\"3\">\r\n          <FormLabel>Date</FormLabel>\r\n          <DatePicker\r\n            format=\"dd/MM/yyyy\"\r\n            value={saleData.date}\r\n            onChange={(date) => {\r\n              setSaleData({ ...saleData, date });\r\n            }}\r\n          />\r\n        </FormControl>\r\n        <FormControl w=\"100%\" ml=\"3\">\r\n          <FormLabel>Customer</FormLabel>\r\n          <AsyncSelect\r\n            loadOptions={searchCustomers}\r\n            onChange={(input) =>\r\n              setSaleData({ ...saleData, customer_id: input.value })\r\n            }\r\n          />\r\n        </FormControl>\r\n\r\n        <FormControl w=\"100%\" ml=\"3\">\r\n          <FormLabel>Quantity</FormLabel>\r\n          <Input\r\n            type=\"number\"\r\n            variant=\"filled\"\r\n            w=\"100%\"\r\n            size=\"lg\"\r\n            name=\"quantity\"\r\n            onChange={(e) =>\r\n              setSaleData({\r\n                ...saleData,\r\n                currency_quantity: parseFloat(e.target.value),\r\n              })\r\n            }\r\n          />\r\n        </FormControl>\r\n        <FormControl w=\"100%\" ml=\"3\">\r\n          <FormLabel>Rate</FormLabel>\r\n          <Input\r\n            type=\"number\"\r\n            variant=\"filled\"\r\n            w=\"100%\"\r\n            size=\"lg\"\r\n            name=\"charge\"\r\n            onChange={(e) =>\r\n              setSaleData({\r\n                ...saleData,\r\n                currency_charge: parseFloat(e.target.value),\r\n              })\r\n            }\r\n          />\r\n        </FormControl>\r\n\r\n        <FormControl w=\"100%\" ml=\"3\">\r\n          <FormLabel>Conversion rate (AED)</FormLabel>\r\n          <Input\r\n            variant=\"filled\"\r\n            w=\"100%\"\r\n            size=\"lg\"\r\n            name=\"total\"\r\n            onChange={(e) =>\r\n              setSaleData({\r\n                ...saleData,\r\n                convertion_rate: parseFloat(e.target.value),\r\n              })\r\n            }\r\n          />\r\n        </FormControl>\r\n\r\n        <FormControl w=\"100%\" ml=\"3\">\r\n          <FormLabel>Total</FormLabel>\r\n          <Input\r\n            type=\"number\"\r\n            variant=\"filled\"\r\n            w=\"100%\"\r\n            size=\"lg\"\r\n            value={saleData.currency_quantity * saleData.currency_charge}\r\n            readOnly\r\n          />\r\n        </FormControl>\r\n\r\n        <FormControl w=\"100%\" ml=\"3\">\r\n          <FormLabel>Total (AED)</FormLabel>\r\n          <Input\r\n            type=\"number\"\r\n            variant=\"filled\"\r\n            w=\"100%\"\r\n            size=\"lg\"\r\n            value={\r\n              (saleData.currency_quantity * saleData.currency_charge) /\r\n              saleData.convertion_rate\r\n            }\r\n            readOnly\r\n          />\r\n        </FormControl>\r\n      </SimpleGrid>\r\n      <Button\r\n        colorScheme=\"blue\"\r\n        size=\"lg\"\r\n        mt=\"4\"\r\n        onClick={() => validate(handleAddSale)}\r\n        isLoading={isLoading}\r\n        loadingText=\"Adding sale\"\r\n      >\r\n        Add Sale\r\n      </Button>\r\n    </>\r\n  );\r\n};\r\n","D:\\accounting\\src\\App.js",[],"D:\\accounting\\src\\api\\cashReciept.js",[],"D:\\accounting\\src\\pages\\entry\\cashReciept.js",["120","121","122","123"],"D:\\accounting\\src\\components\\topBar.js",[],{"ruleId":"124","severity":1,"message":"125","line":11,"column":3,"nodeType":"126","messageId":"127","endLine":11,"endColumn":8},{"ruleId":"124","severity":1,"message":"128","line":13,"column":3,"nodeType":"126","messageId":"127","endLine":13,"endColumn":9},{"ruleId":"124","severity":1,"message":"129","line":23,"column":10,"nodeType":"126","messageId":"127","endLine":23,"endColumn":24},{"ruleId":"124","severity":1,"message":"130","line":23,"column":26,"nodeType":"126","messageId":"127","endLine":23,"endColumn":43},{"ruleId":"131","severity":1,"message":"132","line":57,"column":11,"nodeType":"133","endLine":57,"endColumn":18},{"ruleId":"134","replacedBy":"135"},{"ruleId":"136","replacedBy":"137"},{"ruleId":"124","severity":1,"message":"138","line":22,"column":3,"nodeType":"126","messageId":"127","endLine":22,"endColumn":12},{"ruleId":"124","severity":1,"message":"139","line":32,"column":10,"nodeType":"126","messageId":"127","endLine":32,"endColumn":17},{"ruleId":"124","severity":1,"message":"140","line":16,"column":3,"nodeType":"126","messageId":"127","endLine":16,"endColumn":22},{"ruleId":"124","severity":1,"message":"141","line":35,"column":10,"nodeType":"126","messageId":"127","endLine":35,"endColumn":24},{"ruleId":"124","severity":1,"message":"142","line":35,"column":26,"nodeType":"126","messageId":"127","endLine":35,"endColumn":43},{"ruleId":"124","severity":1,"message":"143","line":81,"column":11,"nodeType":"126","messageId":"127","endLine":81,"endColumn":13},{"ruleId":"134","replacedBy":"144"},{"ruleId":"136","replacedBy":"145"},{"ruleId":"134","replacedBy":"146"},{"ruleId":"136","replacedBy":"147"},{"ruleId":"124","severity":1,"message":"148","line":21,"column":3,"nodeType":"126","messageId":"127","endLine":21,"endColumn":8},{"ruleId":"124","severity":1,"message":"130","line":29,"column":26,"nodeType":"126","messageId":"127","endLine":29,"endColumn":43},{"ruleId":"149","severity":1,"message":"150","line":77,"column":6,"nodeType":"151","endLine":77,"endColumn":8,"suggestions":"152"},{"ruleId":"124","severity":1,"message":"140","line":16,"column":3,"nodeType":"126","messageId":"127","endLine":16,"endColumn":22},{"ruleId":"124","severity":1,"message":"143","line":80,"column":11,"nodeType":"126","messageId":"127","endLine":80,"endColumn":13},{"ruleId":"124","severity":1,"message":"140","line":16,"column":3,"nodeType":"126","messageId":"127","endLine":16,"endColumn":22},{"ruleId":"124","severity":1,"message":"143","line":77,"column":11,"nodeType":"126","messageId":"127","endLine":77,"endColumn":13},{"ruleId":"124","severity":1,"message":"140","line":17,"column":3,"nodeType":"126","messageId":"127","endLine":17,"endColumn":22},{"ruleId":"124","severity":1,"message":"143","line":98,"column":11,"nodeType":"126","messageId":"127","endLine":98,"endColumn":13},{"ruleId":"124","severity":1,"message":"153","line":102,"column":13,"nodeType":"126","messageId":"127","endLine":102,"endColumn":29},{"ruleId":"124","severity":1,"message":"154","line":107,"column":13,"nodeType":"126","messageId":"127","endLine":107,"endColumn":18},"no-unused-vars","'Input' is defined but never used.","Identifier","unusedVar","'Button' is defined but never used.","'isModalVisible' is assigned a value but never used.","'setIsModalVisible' is assigned a value but never used.","react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","no-native-reassign",["155"],"no-negated-in-lhs",["156"],"'useStyles' is defined but never used.","'sumOfOb' is assigned a value but never used.","'updateCustomerObAPI' is defined but never used.","'conversionRate' is assigned a value but never used.","'setConversionRate' is assigned a value but never used.","'ob' is assigned a value but never used.",["155"],["156"],["155"],["156"],"'Tfoot' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'id'. Either include it or remove the dependency array.","ArrayExpression",["157"],"'responseExchange' is assigned a value but never used.","'obTwo' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"158","fix":"159"},"Update the dependencies array to be: [id]",{"range":"160","text":"161"},[2809,2811],"[id]"]